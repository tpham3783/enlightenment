class Elm.Fileselector_Entry (Elm.Layout, Elm_Interface_Fileselector,
                              Evas.Clickable_Interface, Evas.Selectable_Interface)
{
   eo_prefix: elm_obj_fileselector_entry;
   methods {
      @property inwin_mode {
         set {
            /*@
            Set whether a given file selector entry widget's internal file
            selector will raise an Elementary "inner window", instead of a
            dedicated Elementary window. By default, it depends on the current
            profile.

            @see elm_win_inwin_add() for more information on inner windows
            @see elm_fileselector_entry_inwin_mode_get()

            @ingroup File_Selector_Entry */
         }
         get {
            /*@
            Get whether a given file selector entry widget's internal file
            selector will raise an Elementary "inner window", instead of a
            dedicated Elementary window.

            @return @c EINA_TRUE if will use an inner window, @c EINA_FALSE
            if it will use a dedicated window

            @see elm_fileselector_entry_inwin_mode_set() for more details

            @ingroup File_Selector_Entry */
         }
         values {
            value: bool; /*@ @c EINA_TRUE to make it use an inner window, @c
            EINA_FALSE to make it use a dedicated window */
         }
      }
      @property window_size {
         set {
            /*@
            Set the size of a given file selector entry widget's window,
            holding the file selector itself.

            @note it will only take any effect if the file selector entry
            widget is @b not under "inwin mode". The default size for the
            window (when applicable) is 400x400 pixels.

            @see elm_fileselector_entry_window_size_get()

            @ingroup File_Selector_Entry */
         }
         get {
            /*@
            Get the size of a given file selector entry widget's window,
            holding the file selector itself.

            @note Use @c NULL pointers on the size values you're not
            interested in: they'll be ignored by the function.

            @see elm_fileselector_entry_window_size_set(), for more details

            @ingroup File_Selector_Entry */
         }
         values {
            width: Evas.Coord; /*@ The window's width */
            height: Evas.Coord; /*@ The window's height */
         }
      }
      @property window_title {
         set {
            /*@
            Set the title for a given file selector entry widget's window

            This will change the window's title, when the file selector pops
            out after a click on the entry's button. Those windows have the
            default (unlocalized) value of @c "Select a file" as titles.

            @note It will only take any effect if the file selector
            entry widget is @b not under "inwin mode".

            @see elm_fileselector_entry_window_title_get()

            @ingroup File_Selector_Entry */
         }
         get {
            /*@
            Get the title set for a given file selector entry widget's
            window

            @return Title of the file selector entry's window

            @see elm_fileselector_entry_window_title_get() for more details

            @ingroup File_Selector_Entry */
         }
         values {
            title: const(char)*; /*@ The title string */
         }
      }
   }
   implements {
      class.constructor;
      Eo.Base.constructor;
      Evas.Object_Smart.del;
      Evas.Object_Smart.add;
      Elm.Widget.theme_apply;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_next;
      Elm.Widget.disable;
      Elm.Widget.focus_direction_manager_is;
      Elm.Container.content_get;
      Elm.Container.content_unset;
      Elm.Container.content_set;
      Elm.Layout.text_set;
      Elm.Layout.text_get;
      Elm.Layout.sizing_eval;
      Elm_Interface_Fileselector.selected;
      Elm_Interface_Fileselector.folder_only;
      Elm_Interface_Fileselector.is_save;
      Elm_Interface_Fileselector.path;
      Elm_Interface_Fileselector.expandable;
   }
   events {
      language,changed;
      access,changed;
      changed;
      activated;
      file,chosen;
      press;
   }

}
