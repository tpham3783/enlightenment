class Elm.Frame (Elm.Layout, Evas.Clickable_Interface)
{
   eo_prefix: elm_obj_frame;
   methods {
      @property collapse {
         set {
            /*@
            @brief Manually collapse a frame without animations
            Use this to toggle the collapsed state of a frame, bypassing animations.

            @ingroup Frame */
         }
         get {
            /*@
            @brief Determine the collapse state of a frame
            @return true if collapsed, false otherwise

            Use this to determine the collapse state of a frame.

            @ingroup Frame */
         }
         values {
            collapse: bool; /*@ true to collapse, false to expand */
         }
      }
      @property autocollapse {
         set {
            /*@
            @brief Toggle autocollapsing of a frame
            When @p enable is EINA_TRUE, clicking a frame's label will collapse the frame
            vertically, shrinking it to the height of the label.
            By default, this is DISABLED.

            @ingroup Frame */
         }
         get {
            /*@
            @brief Determine autocollapsing of a frame
            @return Whether autocollapse is enabled

            When this returns EINA_TRUE, clicking a frame's label will collapse the frame
            vertically, shrinking it to the height of the label.
            By default, this is DISABLED.

            @ingroup Frame */
         }
         values {
            autocollapse: bool; /*@ Whether to enable autocollapse */
         }
      }
      collapse_go {
         /*@
         @brief Manually collapse a frame with animations
         Use this to toggle the collapsed state of a frame, triggering animations.

         @ingroup Frame */

         params {
            @in collapse: bool; /*@ true to collapse, false to expand */
         }
      }
   }
   implements {
      Eo.Base.constructor;
      class.constructor;
      Evas.Object_Smart.calculate;
      Evas.Object_Smart.add;
      Elm.Widget.focus_direction;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_next;
      Elm.Widget.focus_direction_manager_is;
      Elm.Layout.text_aliases.get;
      Elm.Layout.content_aliases.get;
   }
   events {
      language,changed;
      access,changed;
   }

}
