type Evas.Modifier_Mask: ullong;  [[An Evas modifier mask type]]
type Evas.Coord: int; [[A type for coordinates]]
enum Evas.Aspect_Control {
   [[Aspect types/policies for scaling size hints, used for
     evas_object_size_hint_aspect_set()]]
   none = 0, [[Preference on scaling unset]]
   neither = 1, [[Same effect as unset preference on scaling]]
   horizontal = 2, [[Use all horizontal container space to place an object,
                     using the given aspect]]
   vertical = 3, [[Use all vertical container space to place an object, using
                   the given aspect]]
   both = 4 [[Use all horizontal and vertical container spaces to place an
              object (never growing it out of those bounds), using the given
              aspect]]
}

enum Evas.Render_Op {
   [[How the object should be rendered to output.]]
   legacy: Evas_Render;

   blend = 0, [[default op: d = d*(1-sa) + s]]
   blend_rel = 1, [[d = d*(1 - sa) + s*da]]
   copy = 2, [[d = s]]
   copy_rel = 3, [[d = s*da]]
   add = 4, [[d = d + s]]
   add_rel = 5, [[d = d + s*da]]
   sub = 6, [[d = d - s]]
   sub_rel = 7, [[d = d - s*da]]
   tint = 8, [[d = d*s + d*(1 - sa) + s*(1 - da)]]
   tint_rel = 9, [[d = d*(1 - sa + s)]]
   mask = 10, [[d = d*sa]]
   mul = 11 [[d = d*s]]
}

enum Evas.Object_Pointer_Mode {
   [[How the mouse pointer should be handled by Evas.

     In the mode #EVAS_OBJECT_POINTER_MODE_AUTOGRAB, when a mouse button
     is pressed down over an object and held, with the mouse pointer
     being moved outside of it, the pointer still behaves as being bound
     to that object, albeit out of its drawing region. When the button
     is released, the event will be fed to the object, that may check if
     the final position is over it or not and do something about it.

     In the mode #EVAS_OBJECT_POINTER_MODE_NOGRAB, the pointer will
     always be bound to the object right below it.
   ]]
   autograb, [[default, X11-like]]
   nograb, [[pointer always bound to the object right below it]]
   nograb_no_repeat_updown [[useful on object with "repeat events" enabled,
                             where mouse/touch up and down events WONT be
                             repeated to objects and these objects wont be
                             auto-grabbed.

                             @since 1.2
                           ]]
}

enum Evas.Display_Mode {
   none = 0, [[Default mode]]
   compress = 1, [[Use this mode when you want to give compress display mode
                   hint to an object]]
   expand = 2, [[Use this mode when you want to give expand display mode hint
                 to an object]]
   dont_change = 3 [[Use this mode when an object should not change its display
                     mode]]
}

enum Evas.BiDi_Direction {
   /* BiDi exposed stuff */
   /*FIXME: document */
   natural = 0,
   neutral = 0,
   ltr,
   rtl
}

enum Evas.Text_Style_Type {
   [[Types of styles to be applied on text objects. The
     EVAS_TEXT_STYLE_SHADOW_DIRECTION_* ones are to be ORed together with
     others imposing shadow, to change shadow's direction
   ]]
   legacy: Evas_Text_Style;

   plain, [[plain, standard text]]
   shadow, [[text with shadow underneath]]
   outline, [[text with an outline]]
   soft_outline, [[text with a soft outline]]
   glow, [[text with a glow effect]]
   outline_shadow, [[text with both outline and shadow effects]]
   far_shadow, [[text with (far) shadow underneath]]
   outline_soft_shadow, [[text with outline and soft shadow effects combined]]
   soft_shadow, [[text with (soft) shadow underneath]]
   far_soft_shadow, [[text with (far soft) shadow underneath]]

   /* OR these to modify shadow direction (3 bits needed) */
   shadow_direction_bottom_right = (0x0 << 4),      [[shadow growing to bottom right]]
   shadow_direction_bottom = (0x1 << 4),            [[shadow growing to the bottom]]
   shadow_direction_bottom_left = (0x2 << 4),       [[shadow growing to bottom left]]
   shadow_direction_left = (0x3 << 4),              [[shadow growing to the left]]
   shadow_direction_top_left = (0x4 << 4),          [[shadow growing to top left]]
   shadow_direction_top = (0x5 << 4),               [[shadow growing to the top]]
   shadow_direction_top_right = (0x6 << 4),         [[shadow growing to top right]]
   shadow_direction_right = (0x7 << 4)             [[shadow growing to the right]]
}

type Evas.Font.Size: int; [[A type for font size]]

enum Evas.Font.Hinting_Flags {
   [[Flags for Font Hinting]]
   legacy: Evas_Font_Hinting;

   none, [[No font hinting]]
   auto, [[Automatic font hinting]]
   bytecode [[Bytecode font hinting]]
}

struct Evas.Map; [[An opaque handle to map points

                   See \@ref evas_map_new, \@ref evas_map_free,
                   \@ref evas_map_dup.
                 ]]

enum Evas.Button_Flags {
   [[Flags for Mouse Button events]]
   legacy: Evas_Button;

   none = 0, [[No extra mouse button data]]
   double_click = (1 << 0), [[This mouse button press was the 2nd press of a double click]]
   triple_click = (1 << 1) [[This mouse button press was the 3rd press of a triple click]]
}

enum Evas.Event_Flags {
   [[Flags for Events]]
   legacy: Evas_Event_Flag;

   none = 0, [[No fancy flags set]]
   on_hold = (1 << 0), [[This event is being delivered but should be put "on hold" until the on hold flag is unset. The event should be used for informational purposes and maybe some indications visually, but not actually perform anything]]
   on_scroll = (1 << 1) [[This event flag indicates the event occurs while scrolling; for example, DOWN event occurs during scrolling; the event should be used for informational purposes and maybe some indications visually, but not actually perform anything]]
}

enum Evas.Touch_Point_State {
   [[State of Evas_Coord_Touch_Point]]
   legacy: Evas_Touch_Point;

   down, [[Touch point is pressed down]]
   up, [[Touch point is released]]
   move, [[Touch point is moved]]
   still, [[Touch point is not moved after pressed]]
   cancel [[Touch point is cancelled]]
}

enum Evas.Callback_Type
{
   [[Identifier of callbacks to be set for Evas canvases or Evas objects.]]
   legacy: Evas_Callback;

   /** FIXME-doc
    * The following figure illustrates some Evas callbacks:

    * @image html evas-callbacks.png
    * @image rtf evas-callbacks.png
    * @image latex evas-callbacks.eps
    *
    * @see evas_object_event_callback_add()
    * @see evas_event_callback_add()
    */

   mouse_in, [[Mouse In Event]]
   mouse_out, [[Mouse Out Event]]
   mouse_down, [[Mouse Button Down Event]]
   mouse_up, [[Mouse Button Up Event]]
   mouse_move, [[Mouse Move Event]]
   mouse_wheel, [[Mouse Wheel Event]]
   multi_down, [[Multi-touch Down Event]]
   multi_up, [[Multi-touch Up Event]]
   multi_move, [[Multi-touch Move Event]]
   free, [[Object Being Freed (Called after Del)]]
   key_down, [[Key Press Event]]
   key_up, [[Key Release Event]]
   focus_in, [[Focus In Event]]
   focus_out, [[Focus Out Event]]
   show, [[Show Event]]
   hide, [[Hide Event]]
   move, [[Move Event]]
   resize, [[Resize Event]]
   restack, [[Restack Event]]
   del, [[Object Being Deleted (called before Free)]]
   hold, [[Events go on/off hold]]
   changed_size_hints, [[Size hints changed event]]
   image_preloaded, [[Image has been preloaded]]

   canvas_focus_in, [[Canvas got focus as a whole]]
   canvas_focus_out, [[Canvas lost focus as a whole]]
   render_flush_pre, [[Called just before rendering is updated on the canvas target]]
   render_flush_post, [[Called just after rendering is updated on the canvas target]]
   canvas_object_focus_in, [[Canvas object got focus]]
   canvas_object_focus_ouT, [[Canvas object lost focus]]

   image_unloaded, [[Image data has been unloaded (by some mechanism in Evas that throw out original image data)]]

   render_pre, [[Called just before rendering starts on the canvas target

                 @since 1.2]]
   render_post, [[Called just after rendering stops on the canvas target

                  @since 1.2]]

   image_resize, [[Image size is changed

                   @since 1.8]]
   device_changed, [[Devices added, removed or changed on canvas

                     @since 1.8]]

   axis_update, [[Input device changed value on some axis

                  @since 1.13]]

   canvas_viewport_resize, [[Canvas viewport resized

                             @since 1.15]]
   last [[kept as last element/sentinel -- not really an event]]
}

struct Evas.Modifier; [[An opaque type containing information on which modifier keys are registered in an Evas canvas]]
struct Evas.Lock; [[An opaque type containing information on which lock keys are registered in an Evas canvas]]
struct Evas.Engine_Info; [[A generic Evas Engine information structure]]
struct Evas.Axis; [[Details for a single device axis state

                    @since 1.13]]
